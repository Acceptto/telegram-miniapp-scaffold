<TELEGRAM_UI_COMPONENTS_DOC>
Telegram UI Component Package Documentation
The Telegram UI component package is a comprehensive set of React components designed to create Telegram Mini Apps with a consistent look and feel. It provides a wide range of UI elements that adhere to Telegram's design guidelines and support both light and dark themes.

List of components
AppRoot
Button
Cell
Avatar
Card
Placeholder
Input
Textarea
Select
Checkbox
Radio
Switch
Slider
FileInput
FixedLayout
Div
Group
List
Tabbar
Tabs
SegmentedControl
PanelHeader
Snackbar
Spinner
ScreenSpinner
Progress
Alert
Modal
ActionSheet
Popover
Badge
Tooltip
PullToRefresh
Gallery
RichCell
Breadcrumbs
CompactPagination
Pagination
Link
HorizontalScroll
Spacing
Separator
Banner
Tappable
Touch
UsersStack
IconButton
InlineButtons
Blockquote
Timeline
Steps
Accordion
Chip
ColorInput
CircularProgress
Skeleton
Spoiler


AppRoot
The AppRoot component is the foundation of your Telegram Mini App. It provides the necessary context and styling for all child components.
jsx

import { AppRoot } from '@telegram-apps/telegram-ui';

const App = () => (
  <AppRoot>
    {/* Your app content */}
  </AppRoot>
);
Props:
	•	platform?: 'base' | 'ios' - Specify the platform (defaults to auto-detection)
	•	appearance?: 'light' | 'dark' - Set the app's appearance (defaults to auto-detection)
	•	portalContainer?: RefObject<HTMLDivElement> - Custom portal container for modals and popups
Button
The Button component is used for clickable actions in forms, dialogs, and more.
jsx

import { Button } from '@telegram-apps/telegram-ui';

<Button size="m" mode="primary" onClick={handleClick}>
  Click me
</Button>
Props:
	•	size?: 's' | 'm' | 'l' - Button size
	•	mode?: 'primary' | 'secondary' | 'outline' | 'text' - Visual style of the button
	•	stretched?: boolean - Whether the button should take full width
	•	before?: ReactNode - Content to display before the button text
	•	after?: ReactNode - Content to display after the button text
	•	loading?: boolean - Show a loading spinner
	•	disabled?: boolean - Disable the button
	•	Component?: ElementType - Custom component to use as the button root
Cell
The Cell component is used for list items or interactive elements.
jsx

import { Cell } from '@telegram-apps/telegram-ui';

<Cell
  before={<Avatar />}
  after={<Switch />}
  description="Manage your profile"
>
  User Settings
</Cell>
Props:
	•	before?: ReactNode - Content to display before the main text
	•	after?: ReactNode - Content to display after the main text
	•	description?: ReactNode - Additional description text
	•	disabled?: boolean - Disable the cell
	•	multiline?: boolean - Allow multiple lines of text
	•	Component?: ElementType - Custom component to use as the cell root
Avatar
The Avatar component displays user avatars or placeholder images.
jsx

import { Avatar } from '@telegram-apps/telegram-ui';

<Avatar
  size={48}
  src="https://example.com/avatar.jpg"
  fallbackIcon={<Icon24User />}
/>
Props:
	•	size?: number - Size of the avatar in pixels
	•	src?: string - URL of the avatar image
	•	fallbackIcon?: ReactNode - Icon to display when image fails to load
	•	children?: ReactNode - Custom content to display inside the avatar
Card
The Card component is used to group related content and actions.
jsx

import { Card } from '@telegram-apps/telegram-ui';

<Card>
  <Card.Header>Title</Card.Header>
  <Card.Content>Content goes here</Card.Content>
  <Card.Footer>
    <Button>Action</Button>
  </Card.Footer>
</Card>
Props:
	•	mode?: 'outline' | 'shadow' - Visual style of the card
	•	padding?: 's' | 'm' | 'l' | 'none' - Padding inside the card
Subcomponents:
	•	Card.Header
	•	Card.Content
	•	Card.Footer
Placeholder
The Placeholder component displays a message when there's no content to show.
jsx

import { Placeholder } from '@telegram-apps/telegram-ui';

<Placeholder
  icon={<Icon56GhostOutline />}
  header="No messages"
  action={<Button>Start a chat</Button>}
>
  You don't have any messages yet
</Placeholder>
Props:
	•	icon?: ReactNode - Icon to display
	•	header?: ReactNode - Header text
	•	action?: ReactNode - Action element (e.g., a button)


Input
The Input component is used for text input fields.
jsx

import { Input } from '@telegram-apps/telegram-ui';

<Input
  type="text"
  placeholder="Enter your name"
  value={name}
  onChange={handleNameChange}
/>
Props:
	•	type?: string - Input type (e.g., 'text', 'password', 'email')
	•	placeholder?: string - Placeholder text
	•	value?: string - Current value
	•	onChange?: (e: ChangeEvent<HTMLInputElement>) => void - Change handler
	•	status?: 'default' | 'error' | 'valid' - Visual status of the input
	•	disabled?: boolean - Disable the input
	•	before?: ReactNode - Content to display before the input
	•	after?: ReactNode - Content to display after the input
Textarea
The Textarea component is used for multiline text input.
jsx

import { Textarea } from '@telegram-apps/telegram-ui';

<Textarea
  placeholder="Enter your message"
  value={message}
  onChange={handleMessageChange}
/>
Props:
	•	Similar to Input props, plus:
	•	autoHeight?: boolean - Automatically adjust height based on content
	•	maxHeight?: number - Maximum height in pixels
Select
The Select component creates a dropdown selection input.
jsx

import { Select } from '@telegram-apps/telegram-ui';

<Select
  value={selectedOption}
  onChange={handleSelectChange}
  options={[
    { value: 'option1', label: 'Option 1' },
    { value: 'option2', label: 'Option 2' },
  ]}
/>
Props:
	•	value?: string | number - Current selected value
	•	onChange?: (value: string | number) => void - Change handler
	•	options: Array<{ value: string | number, label: string }> - Options to display
	•	placeholder?: string - Placeholder text when no option is selected
	•	disabled?: boolean - Disable the select
Checkbox
The Checkbox component creates a checkbox input.
jsx

import { Checkbox } from '@telegram-apps/telegram-ui';

<Checkbox
  checked={isChecked}
  onChange={handleCheckboxChange}
>
  I agree to the terms
</Checkbox>
Props:
	•	checked?: boolean - Whether the checkbox is checked
	•	onChange?: (checked: boolean) => void - Change handler
	•	disabled?: boolean - Disable the checkbox
Radio
The Radio component creates a radio button input.
jsx

import { Radio } from '@telegram-apps/telegram-ui';

<Radio
  name="option"
  value="option1"
  checked={selectedOption === 'option1'}
  onChange={handleRadioChange}
>
  Option 1
</Radio>
Props:
	•	name: string - Name of the radio group
	•	value: string | number - Value of this radio option
	•	checked?: boolean - Whether this radio option is selected
	•	onChange?: (value: string | number) => void - Change handler
	•	disabled?: boolean - Disable the radio button
Switch
The Switch component creates a toggle switch input.
jsx

import { Switch } from '@telegram-apps/telegram-ui';

<Switch
  checked={isEnabled}
  onChange={handleSwitchChange}
>
  Enable feature
</Switch>
Props:
	•	checked?: boolean - Whether the switch is on
	•	onChange?: (checked: boolean) => void - Change handler
	•	disabled?: boolean - Disable the switch
Slider
The Slider component creates a range input.
jsx

import { Slider } from '@telegram-apps/telegram-ui';

<Slider
  min={0}
  max={100}
  step={1}
  value={sliderValue}
  onChange={handleSliderChange}
/>
Props:
	•	min?: number - Minimum value
	•	max?: number - Maximum value
	•	step?: number - Step increment
	•	value?: number - Current value
	•	onChange?: (value: number) => void - Change handler
	•	disabled?: boolean - Disable the slider
FileInput
The FileInput component creates a file input field.
jsx

import { FileInput } from '@telegram-apps/telegram-ui';

<FileInput
  onChange={handleFileChange}
  accept="image/*"
  multiple
>
  Upload image
</FileInput>
Props:
	•	onChange?: (files: FileList) => void - Change handler
	•	accept?: string - Accepted file types
	•	multiple?: boolean - Allow multiple file selection
	•	disabled?: boolean - Disable the file input

FixedLayout
The FixedLayout component creates a fixed-position container, typically used for headers or footers.
jsx

import { FixedLayout } from '@telegram-apps/telegram-ui';

<FixedLayout vertical="top">
  <PanelHeader>Header</PanelHeader>
</FixedLayout>
Props:
	•	vertical?: 'top' | 'bottom' - Vertical positioning
	•	filled?: boolean - Whether to fill the background
Div
The Div component is a basic block-level container with optional styles.
jsx

import { Div } from '@telegram-apps/telegram-ui';

<Div>
  Content goes here
</Div>
Props:
	•	padding?: 'xs' | 's' | 'm' | 'l' | 'none' - Padding size
Group
The Group component groups related content together.
jsx

import { Group } from '@telegram-apps/telegram-ui';

<Group header={<Header mode="secondary">Group Title</Header>}>
  <Cell>Item 1</Cell>
  <Cell>Item 2</Cell>
</Group>
Props:
	•	header?: ReactNode - Group header content
	•	description?: ReactNode - Group description content
	•	separator?: 'hide' | 'show' - Whether to show separators between items
List
The List component renders a list of items.
jsx

import { List } from '@telegram-apps/telegram-ui';

<List>
  <Cell>Item 1</Cell>
  <Cell>Item 2</Cell>
</List>
Props:
	•	No specific props, acts as a wrapper for list items
4. Navigation Components
Tabbar
The Tabbar component creates a bottom navigation bar.
jsx

import { Tabbar, TabbarItem } from '@telegram-apps/telegram-ui';

<Tabbar>
  <TabbarItem
    selected={activeTab === 'home'}
    onClick={() => setActiveTab('home')}
    text="Home"
  >
    <Icon28HomeOutline />
  </TabbarItem>
  <TabbarItem
    selected={activeTab === 'profile'}
    onClick={() => setActiveTab('profile')}
    text="Profile"
  >
    <Icon28UserOutline />
  </TabbarItem>
</Tabbar>
Props for TabbarItem:
	•	selected?: boolean - Whether this tab is currently selected
	•	text?: string - Text label for the tab
	•	indicator?: ReactNode - Custom indicator (e.g., notification badge)
Tabs
The Tabs component creates a horizontal tab navigation.
jsx

import { Tabs, TabsItem } from '@telegram-apps/telegram-ui';

<Tabs>
  <TabsItem
    selected={activeTab === 'tab1'}
    onClick={() => setActiveTab('tab1')}
  >
    Tab 1
  </TabsItem>
  <TabsItem
    selected={activeTab === 'tab2'}
    onClick={() => setActiveTab('tab2')}
  >
    Tab 2
  </TabsItem>
</Tabs>
Props for TabsItem:
	•	selected?: boolean - Whether this tab is currently selected
SegmentedControl
The SegmentedControl component creates a segmented control for switching between views.
jsx

import { SegmentedControl } from '@telegram-apps/telegram-ui';

<SegmentedControl
  options={[
    { label: 'Day', value: 'day' },
    { label: 'Week', value: 'week' },
    { label: 'Month', value: 'month' },
  ]}
  value={selectedView}
  onChange={setSelectedView}
/>
Props:
	•	options: Array<{ label: string, value: string | number }> - Options to display
	•	value: string | number - Currently selected value
	•	onChange: (value: string | number) => void - Change handler
PanelHeader
The PanelHeader component creates a header for panels or pages.
jsx

import { PanelHeader } from '@telegram-apps/telegram-ui';

<PanelHeader
  left={<PanelHeaderBack onClick={goBack} />}
  right={<PanelHeaderButton onClick={openMenu}>Menu</PanelHeaderButton>}
>
  Page Title
</PanelHeader>
Props:
	•	left?: ReactNode - Content for the left side of the header
	•	right?: ReactNode - Content for the right side of the header
	•	separator?: boolean - Whether to show a separator below the header
5. Feedback Components
Snackbar
The Snackbar component displays brief messages at the bottom of the screen.
jsx

import { Snackbar } from '@telegram-apps/telegram-ui';

<Snackbar
  onClose={() => setSnackbar(null)}
  before={<Icon24Info />}
  action="Undo"
  onActionClick={handleUndo}
>
  Message sent
</Snackbar>
Props:
	•	onClose: () => void - Close handler
	•	before?: ReactNode - Content to display before the message
	•	after?: ReactNode - Content to display after the message
	•	action?: ReactNode - Action text or element
	•	onActionClick?: () => void - Action click handler
	•	duration?: number - Duration in milliseconds before auto-closing
Spinner
The Spinner component displays a loading indicator.
jsx

import { Spinner } from '@telegram-apps/telegram-ui';

<Spinner size="medium" />
Props:
	•	size?: 'small' | 'medium' | 'large' - Size of the spinner
ScreenSpinner
The ScreenSpinner component displays a full-screen loading indicator.
jsx

import { ScreenSpinner } from '@telegram-apps/telegram-ui';

<ScreenSpinner state="loading" />
Props:
	•	state?: 'loading' | 'error' | 'done' - Current state of the spinner
Progress
The Progress component displays a progress bar.
jsx

import { Progress } from '@telegram-apps/telegram-ui';

<Progress value={50} />
Props:
	•	value: number - Current progress value (0-100)
Alert
The Alert component displays an alert dialog.
jsx

import { Alert } from '@telegram-apps/telegram-ui';

<Alert
  actions={[
    {
      title: 'Cancel',
      autoclose: true,
      mode: 'cancel',
    },
    {
      title: 'Delete',
      autoclose: true,
      mode: 'destructive',
      action: () => console.log('Deleted'),
    },
  ]}
  actionsLayout="horizontal"
  onClose={() => setAlert(null)}
  header="Confirm action"
  text="Are you sure you want to delete this item?"
/>
Props:
	•	actions: Array<{ title: string, autoclose?: boolean, mode?: 'default' | 'destructive' | 'cancel', action?: () => void }> - Action buttons
	•	actionsLayout?: 'vertical' | 'horizontal' - Layout of action buttons
	•	onClose: () => void - Close handler
	•	header?: string - Alert header text
	•	text?: string - Alert body text

Modal
The Modal component creates a modal dialog.
jsx

import { Modal } from '@telegram-apps/telegram-ui';

<Modal
  header={<Modal.Header>Modal Title</Modal.Header>}
  onClose={handleClose}
>
  <Div>Modal content goes here</Div>
</Modal>
Props:
	•	header?: ReactNode - Modal header content
	•	onClose: () => void - Close handler
	•	children: ReactNode - Modal content
ActionSheet
The ActionSheet component displays a list of actions.
jsx

import { ActionSheet, ActionSheetItem } from '@telegram-apps/telegram-ui';

<ActionSheet
  onClose={() => setActionSheet(null)}
  iosCloseItem={<ActionSheetItem autoclose mode="cancel">Cancel</ActionSheetItem>}
>
  <ActionSheetItem autoclose onClick={handleEdit}>
    Edit
  </ActionSheetItem>
  <ActionSheetItem autoclose mode="destructive" onClick={handleDelete}>
    Delete
  </ActionSheetItem>
</ActionSheet>
Props:
	•	onClose: () => void - Close handler
	•	iosCloseItem?: ReactNode - Custom close item for iOS
	•	toggleRef?: RefObject<HTMLElement> - Ref to the toggle element
Popover
The Popover component displays a popover attached to an element.
jsx

import { Popover } from '@telegram-apps/telegram-ui';

<Popover
  action="click"
  shown={popoverShown}
  onShownChange={setPopoverShown}
  content={
    <Div>Popover content</Div>
  }
>
  <Button>Show Popover</Button>
</Popover>
Props:
	•	action?: 'click' | 'hover' - Trigger action
	•	shown?: boolean - Whether the popover is shown
	•	onShownChange: (shown: boolean) => void - Shown state change handler
	•	content: ReactNode - Popover content
	•	alignment?: 'left' | 'right' - Horizontal alignment
7. Miscellaneous Components
Badge
The Badge component displays a small status indicator.
jsx

import { Badge } from '@telegram-apps/telegram-ui';

<Badge mode="prominent">New</Badge>
Props:
	•	mode?: 'new' | 'prominent' - Visual style of the badge
Tooltip
The Tooltip component displays a tooltip when hovering over an element.
jsx

import { Tooltip } from '@telegram-apps/telegram-ui';

<Tooltip text="This is a tooltip">
  <span>Hover me</span>
</Tooltip>
Props:
	•	text: string - Tooltip text
	•	alignX?: 'left' | 'center' | 'right' - Horizontal alignment
	•	alignY?: 'top' | 'bottom' - Vertical alignment
PullToRefresh
The PullToRefresh component adds pull-to-refresh functionality.
jsx

import { PullToRefresh } from '@telegram-apps/telegram-ui';

<PullToRefresh onRefresh={handleRefresh} isFetching={isFetching}>
  <div>Content goes here</div>
</PullToRefresh>
Props:
	•	onRefresh: () => void - Refresh handler
	•	isFetching: boolean - Whether a refresh is in progress
Gallery
The Gallery component creates an image gallery or slideshow.
jsx

import { Gallery } from '@telegram-apps/telegram-ui';

<Gallery
  slideIndex={activeSlide}
  onChange={setActiveSlide}
  slides={[
    <img src="image1.jpg" alt="Slide 1" />,
    <img src="image2.jpg" alt="Slide 2" />,
  ]}
/>
Props:
	•	slideIndex: number - Index of the current slide
	•	onChange: (index: number) => void - Slide change handler
	•	slides: ReactNode[] - Array of slide content
RichCell
The RichCell component is an enhanced version of Cell with additional styling options.
jsx

import { RichCell } from '@telegram-apps/telegram-ui';

<RichCell
  disabled
  multiline
  before={<Avatar size={72} />}
  text="Additional text"
  caption="Caption"
  after="Info"
  actions={
    <React.Fragment>
      <Button>Action 1</Button>
      <Button>Action 2</Button>
    </React.Fragment>
  }
>
  Rich Cell Content
</RichCell>
Props:
	•	Extends Cell props
	•	text?: ReactNode - Additional text content
	•	caption?: ReactNode - Caption text
	•	actions?: ReactNode - Action buttons

Breadcrumbs
The Breadcrumbs component displays a navigation path.
jsx

import { Breadcrumbs } from '@telegram-apps/telegram-ui';

<Breadcrumbs>
  <Breadcrumbs.Item href="/">Home</Breadcrumbs.Item>
  <Breadcrumbs.Item href="/category">Category</Breadcrumbs.Item>
  <Breadcrumbs.Item>Current Page</Breadcrumbs.Item>
</Breadcrumbs>
Props:
	•	children: ReactNode - Breadcrumb items
CompactPagination
The CompactPagination component provides a compact pagination control.
jsx

import { CompactPagination } from '@telegram-apps/telegram-ui';

<CompactPagination
  currentPage={currentPage}
  totalPages={totalPages}
  onChange={handlePageChange}
/>
Props:
	•	currentPage: number - Current page number
	•	totalPages: number - Total number of pages
	•	onChange: (page: number) => void - Page change handler
Pagination
The Pagination component provides a full pagination control.
jsx

import { Pagination } from '@telegram-apps/telegram-ui';

<Pagination
  currentPage={currentPage}
  totalPages={totalPages}
  onChange={handlePageChange}
/>
Props:
	•	currentPage: number - Current page number
	•	totalPages: number - Total number of pages
	•	onChange: (page: number) => void - Page change handler
Link
The Link component creates a styled link.
jsx

import { Link } from '@telegram-apps/telegram-ui';

<Link href="https://telegram.org">Visit Telegram</Link>
Props:
	•	Extends anchor tag props
HorizontalScroll
The HorizontalScroll component creates a horizontally scrollable container.
jsx

import { HorizontalScroll } from '@telegram-apps/telegram-ui';

<HorizontalScroll>
  <div style={{display: 'flex'}}>
    <div>Item 1</div>
    <div>Item 2</div>
    <div>Item 3</div>
  </div>
</HorizontalScroll>
Props:
	•	Extends div props
Spacing
The Spacing component adds vertical spacing between elements.
jsx

import { Spacing } from '@telegram-apps/telegram-ui';

<Spacing size={16} />
Props:
	•	size: number - Size of the spacing in pixels
Separator
The Separator component adds a horizontal line separator.
jsx

import { Separator } from '@telegram-apps/telegram-ui';

<Separator />
Props:
	•	wide?: boolean - Whether to use a wider style
Banner
The Banner component displays a prominent message or call-to-action.
jsx

import { Banner } from '@telegram-apps/telegram-ui';

<Banner
  before={<Icon28InfoOutline />}
  header="Banner Title"
  subheader="Banner description"
  actions={<Button>Action</Button>}
/>
Props:
	•	before?: ReactNode - Content to display before the text
	•	header?: ReactNode - Banner header
	•	subheader?: ReactNode - Banner subheader
	•	actions?: ReactNode - Action buttons
Tappable
The Tappable component creates a tappable area with visual feedback.
jsx

import { Tappable } from '@telegram-apps/telegram-ui';

<Tappable onClick={handleTap}>
  Tap me
</Tappable>
Props:
	•	Extends div props
	•	activeEffectDelay?: number - Delay for the active effect in milliseconds
Touch
The Touch component adds touch event handling to its children.
jsx

import { Touch } from '@telegram-apps/telegram-ui';

<Touch onStart={handleTouchStart} onMove={handleTouchMove} onEnd={handleTouchEnd}>
  <div>Touch area</div>
</Touch>
Props:
	•	onStart?: (e: TouchEvent) => void - Touch start handler
	•	onMove?: (e: TouchEvent) => void - Touch move handler
	•	onEnd?: (e: TouchEvent) => void - Touch end handler
UsersStack
The UsersStack component displays a stack of user avatars.
jsx

import { UsersStack } from '@telegram-apps/telegram-ui';

<UsersStack
  photos={[
    'user1.jpg',
    'user2.jpg',
    'user3.jpg',
  ]}
  size="m"
/>
Props:
	•	photos: string[] - Array of user photo URLs
	•	size?: 's' | 'm' - Size of the avatar stack

IconButton
The IconButton component creates a button specifically designed for icons.
jsx

import { IconButton } from '@telegram-apps/telegram-ui';
import { Icon24Send } from '@telegram-apps/icons';

<IconButton>
  <Icon24Send />
</IconButton>
Props:
	•	size?: 's' | 'm' | 'l' - Size of the button
	•	mode?: 'primary' | 'secondary' | 'tertiary' | 'outline' - Visual style of the button
	•	disabled?: boolean - Disables the button
InlineButtons
The InlineButtons component renders a row of inline buttons.
jsx

import { InlineButtons } from '@telegram-apps/telegram-ui';

<InlineButtons>
  <InlineButtons.Button onClick={handleClick1}>Button 1</InlineButtons.Button>
  <InlineButtons.Button onClick={handleClick2}>Button 2</InlineButtons.Button>
</InlineButtons>
Props for InlineButtons.Button:
	•	before?: ReactNode - Content to display before the button text
	•	after?: ReactNode - Content to display after the button text
Blockquote
The Blockquote component displays quoted text.
jsx

import { Blockquote } from '@telegram-apps/telegram-ui';

<Blockquote>This is a quoted text.</Blockquote>
Props:
	•	mode?: 'primary' | 'secondary' - Visual style of the blockquote
Timeline
The Timeline component displays a series of events in chronological order.
jsx

import { Timeline } from '@telegram-apps/telegram-ui';

<Timeline>
  <Timeline.Item>Event 1</Timeline.Item>
  <Timeline.Item>Event 2</Timeline.Item>
  <Timeline.Item>Event 3</Timeline.Item>
</Timeline>
Props for Timeline.Item:
	•	before?: ReactNode - Content to display before the item text
	•	after?: ReactNode - Content to display after the item text
Steps
The Steps component displays a sequence of steps or stages.
jsx

import { Steps } from '@telegram-apps/telegram-ui';

<Steps activeStep={1}>
  <Steps.Item title="Step 1" description="Description of step 1" />
  <Steps.Item title="Step 2" description="Description of step 2" />
  <Steps.Item title="Step 3" description="Description of step 3" />
</Steps>
Props:
	•	activeStep: number - Index of the currently active step
Props for Steps.Item:
	•	title: string - Title of the step
	•	description?: string - Description of the step
Accordion
The Accordion component allows content to be expanded or collapsed.
jsx

import { Accordion } from '@telegram-apps/telegram-ui';

<Accordion>
  <Accordion.Item title="Section 1">
    Content for section 1
  </Accordion.Item>
  <Accordion.Item title="Section 2">
    Content for section 2
  </Accordion.Item>
</Accordion>
Props for Accordion.Item:
	•	title: string - Title of the accordion section
	•	expanded?: boolean - Whether the section is expanded
	•	onToggle?: () => void - Callback when the section is toggled
Chip
The Chip component represents a compact element for an input, attribute, or action.
jsx

import { Chip } from '@telegram-apps/telegram-ui';

<Chip removable onRemove={handleRemove}>Label</Chip>
Props:
	•	removable?: boolean - Whether the chip can be removed
	•	onRemove?: () => void - Callback when the chip is removed
	•	before?: ReactNode - Content to display before the chip text
	•	after?: ReactNode - Content to display after the chip text
ColorInput
The ColorInput component provides an input specifically for color selection.
jsx

import { ColorInput } from '@telegram-apps/telegram-ui';

<ColorInput
  value={color}
  onChange={handleColorChange}
/>
Props:
	•	value: string - Current color value
	•	onChange: (color: string) => void - Callback when the color is changed
	•	defaultValue?: string - Default color value
CircularProgress
The CircularProgress component displays a circular progress indicator.
jsx

import { CircularProgress } from '@telegram-apps/telegram-ui';

<CircularProgress value={75} size="medium" />
Props:
	•	value: number - Current progress value (0-100)
	•	size?: 'small' | 'medium' | 'large' - Size of the progress indicator
Skeleton
The Skeleton component is a placeholder used to show a loading state for content.
jsx

import { Skeleton } from '@telegram-apps/telegram-ui';

<Skeleton width={200} height={20} />
Props:
	•	width?: number | string - Width of the skeleton
	•	height?: number | string - Height of the skeleton
	•	borderRadius?: number | string - Border radius of the skeleton
Spoiler
The Spoiler component hides content until the user chooses to reveal it.
jsx

import { Spoiler } from '@telegram-apps/telegram-ui';

<Spoiler>
  This is hidden content that can be revealed.
</Spoiler>
Props:
	•	shown?: boolean - Whether the content is revealed
	•	onToggle?: (shown: boolean) => void - Callback when the spoiler is toggled


AvatarStack
The AvatarStack component displays multiple avatars overlapping each other.
jsx

import { AvatarStack } from '@telegram-apps/telegram-ui';

<AvatarStack size={32}>
  <Avatar src="user1.jpg" />
  <Avatar src="user2.jpg" />
  <Avatar src="user3.jpg" />
</AvatarStack>
Props:
	•	size?: number - Size of each avatar in the stack
FormLayout
The FormLayout component provides a consistent layout for form elements.
jsx

import { FormLayout } from '@telegram-apps/telegram-ui';

<FormLayout>
  <Input top="Username" />
  <Input top="Password" type="password" />
  <Button size="l" stretched>Submit</Button>
</FormLayout>
Props:
	•	No specific props, acts as a wrapper for form components
FormItem
The FormItem component wraps form inputs with a label and optional status.
jsx

import { FormItem } from '@telegram-apps/telegram-ui';

<FormItem top="Email" status="error" bottom="Invalid email format">
  <Input type="email" />
</FormItem>
Props:
	•	top?: ReactNode - Label text or element
	•	bottom?: ReactNode - Helper text or error message
	•	status?: 'default' | 'error' | 'valid' - Status of the form item
FormStatus
The FormStatus component displays a status message for a form.
jsx

import { FormStatus } from '@telegram-apps/telegram-ui';

<FormStatus mode="error">
  There was an error submitting the form. Please try again.
</FormStatus>
Props:
	•	mode: 'default' | 'error' - Visual style of the status message


Theming and Styling
The package supports Telegram's light and dark themes out of the box. The AppRoot component automatically detects and applies the appropriate theme based on the user's Telegram settings.
Custom styling can be achieved using CSS modules or by leveraging the package's built-in CSS variables.
usePlatform
This hook returns the current platform ('ios' or 'base').
jsx

import { usePlatform } from '@telegram-apps/telegram-ui';

function MyComponent() {
  const platform = usePlatform();
  return <div>Current platform: {platform}</div>;
}
useAppearance
This hook returns the current appearance ('light' or 'dark').
jsx

import { useAppearance } from '@telegram-apps/telegram-ui';

function MyComponent() {
  const appearance = useAppearance();
  return <div>Current appearance: {appearance}</div>;
}
useAdaptivity
This hook provides information about the current adaptivity.
jsx

import { useAdaptivity } from '@telegram-apps/telegram-ui';

function MyComponent() {
  const { viewWidth, viewHeight } = useAdaptivity();
  return <div>View size: {viewWidth} x {viewHeight}</div>;
}
useInsets
This hook provides information about the safe area insets.
jsx

import { useInsets } from '@telegram-apps/telegram-ui';

function MyComponent() {
  const { bottom, top, left, right } = useInsets();
  return <div style={{ paddingBottom: bottom }}>Content</div>;
}
useTimeout
This hook provides a convenient way to use setTimeout with automatic cleanup.
jsx

import { useTimeout } from '@telegram-apps/telegram-ui';

function MyComponent() {
  const [isVisible, setIsVisible] = useState(true);
  useTimeout(() => {
    setIsVisible(false);
  }, 5000);

  return isVisible ? <div>I will disappear in 5 seconds</div> : null;
}
Utilities
classNames
A utility function for conditionally joining classNames together.
jsx

import { classNames } from '@telegram-apps/telegram-ui';

const className = classNames('foo', { bar: true, baz: false }, 'qux');
// Result: 'foo bar qux'
platform
An object containing platform-specific information.
jsx

import { platform } from '@telegram-apps/telegram-ui';

console.log(platform.OS); // 'ios' or 'android'
console.log(platform.isIOS); // true or false
getRandomId
A utility function for generating random IDs.
jsx

import { getRandomId } from '@telegram-apps/telegram-ui';

const id = getRandomId();
transformPlatformStrings
A utility function for transforming strings based on the platform.
jsx

import { transformPlatformStrings } from '@telegram-apps/telegram-ui';

const result = transformPlatformStrings({
  ios: 'iOS string',
  android: 'Android string',
});
getTelegramData
A utility function for getting Telegram-specific data.
jsx

import { getTelegramData } from '@telegram-apps/telegram-ui';

const telegramData = getTelegramData();


Best Practices
	1	Always wrap your app with the AppRoot component.
	2	Use the provided components instead of raw HTML elements for consistency.
	3	Leverage the built-in theming system instead of creating custom color schemes.
	4	Use the usePlatform() hook to adapt your UI for different platforms when necessary.

Helpful notes on this documentation:
	1	Component Composition: Many components in this library are designed to work together. For example, AppRootshould wrap the entire application, and components like Div, Group, and Cell are often nested within each other.
	2	Platform-Specific Behavior: The library automatically adapts to iOS or Android styling based on the platform. The usePlatform hook can be used to apply platform-specific logic if needed.
	3	Theming: The library supports both light and dark themes. The useAppearance hook can be used to apply theme-specific styles or logic.
	4	Telegram Web App Integration: This library is designed to work seamlessly with Telegram Mini Apps. Some components and utilities may interact with Telegram-specific features.
	5	Accessibility: The components are designed with accessibility in mind. Ensure to maintain proper ARIA attributes and roles when customizing components.
	6	Responsive Design: Many components adapt to different screen sizes. Use the useAdaptivity hook to create responsive layouts.
	7	Error Handling: When using form components, remember to handle and display errors appropriately using components like FormStatus.
	8	Event Handling: Many components accept standard React event handlers (onClick, onChange, etc.). Use these to create interactive elements.
	9	Custom Styling: While the library provides a consistent look, you can still apply custom styles to components. Use the className prop or CSS modules for custom styling.
	10	TypeScript Support: The library is written in TypeScript and provides type definitions. Utilize these for better type checking and autocompletion.
	11	Performance Optimization: Utilize hooks like useObjectMemo and utilities like throttle and debounce to optimize performance when needed.
	12	Storybook Examples: The package likely includes Storybook examples. These can be valuable references for component usage and prop combinations.
	13	Consistent Naming: The library uses consistent naming conventions. For example, many components have beforeand after props for content positioning.
	14	Modal and Popup Handling: When using components like Modal, Popover, or ActionSheet, ensure proper state management for showing/hiding these elements.
	15	Form Handling: The library provides various form components, but you might need to manage form state yourself or use a form library like Formik or react-hook-form.
</TELEGRAM_UI_COMPONENTS_DOC>
